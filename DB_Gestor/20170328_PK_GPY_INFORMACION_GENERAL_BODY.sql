create or replace PACKAGE BODY          "PK_GPY_INFORMACION_GENERAL" 
AS
  PROCEDURE Pr_RegistrarInfoProyect(
      p_A013FECHREPRT            IN GPYT_T013_Avance_Proyecto.A013FECHREPRT%TYPE,
      p_A013CAMBSIGNFCTV         IN GPYT_T013_Avance_Proyecto.A013CAMBSIGNFCTV%TYPE,
      p_A013COSTTONLD            IN GPYT_T013_Avance_Proyecto.A013COSTTONLD%TYPE,
      p_A013FINANCCN             IN GPYT_T013_Avance_Proyecto.A013FINANCCN%TYPE,
      p_A013FECHAVNCPROYCT       IN GPYT_T013_Avance_Proyecto.A013FECHAVNCPROYCT%TYPE,
      p_A013OPTAPAGORESULTADOS   IN GPYT_T013_Avance_Proyecto.A013OPTAPAGORESULTADOS%TYPE,
      p_A013IDPROYECTO           IN GPYT_T013_Avance_Proyecto.A013IDPROYECTO%TYPE,
      p_A013EMISREDCXVERIFICAR   IN GPYT_T013_Avance_Proyecto.A013EMISREDCXVERIFICAR%TYPE,
      p_A013EMISREDCVERIFICADAS  IN GPYT_T013_Avance_Proyecto.A013EMISREDCVERIFICADAS%TYPE,
      p_A013EMISREDCDISPNTRANSAR IN GPYT_T013_Avance_Proyecto.A013EMISREDCDISPNTRANSAR%TYPE,
      p_A013EMISREDCTRANSADAS    IN GPYT_T013_Avance_Proyecto.A013EMISREDCTRANSADAS%TYPE,
      p_A013IDARCHV              IN GPYT_T013_Avance_Proyecto.A013IDARCHV%TYPE,
      p_A013NROCPAS              IN GPYT_T013_Avance_Proyecto.A013NROCPAS%TYPE,
      p_A013HAYNUEVOCPA          IN GPYT_T013_Avance_Proyecto.A013HAYNUEVOCPA%TYPE,
      p_idUsuario                IN NUMBER,
      p_resultado OUT CURSOR_SALIDA,
      p_codError OUT NUMBER,
      p_msjError OUT VARCHAR2)
  AS
    NOMBRE_PROCEDIMIENTO VARCHAR2(50) := 'Pr_RegistrarInfoProyect';
    codExcepcion         NUMBER;
  BEGIN
    PK_UTL_UTILIDAD.PR_REGISTRARDEBUG(p_niveldebug => PK_UTL_CONSTANTE.NIVEL_TRACE, p_paquete => NOMBRE_PAQUETE, p_procedimiento => NOMBRE_PROCEDIMIENTO, p_usuario => p_idUsuario, p_descripcion => 'Entro a Pr_RegistrarInfoProyect ');
    --
    PK_T013_AVANCE_PROYECTO.PR_INSERTAR( P_A013FECHREPRT => P_A013FECHREPRT, P_A013CAMBSIGNFCTV => P_A013CAMBSIGNFCTV, P_A013COSTTONLD => P_A013COSTTONLD, P_A013FINANCCN => P_A013FINANCCN, P_A013FECHAVNCPROYCT => P_A013FECHAVNCPROYCT, P_A013OPTAPAGORESULTADOS => P_A013OPTAPAGORESULTADOS, P_A013IDPROYECTO => P_A013IDPROYECTO, P_A013EMISREDCXVERIFICAR => P_A013EMISREDCXVERIFICAR, P_A013EMISREDCVERIFICADAS => P_A013EMISREDCVERIFICADAS, P_A013EMISREDCDISPNTRANSAR => P_A013EMISREDCDISPNTRANSAR, P_A013EMISREDCTRANSADAS => P_A013EMISREDCTRANSADAS, P_A013IDARCHV => P_A013IDARCHV, P_A013NROCPAS => P_A013NROCPAS, P_A013HAYNUEVOCPA => P_A013HAYNUEVOCPA, P_IDUSUARIO => P_IDUSUARIO, P_RESULTADO => P_RESULTADO, P_CODERROR => P_CODERROR, P_MSJERROR => P_MSJERROR );
    --
    PK_UTL_UTILIDAD.PR_REGISTRARDEBUG(p_niveldebug => PK_UTL_CONSTANTE.NIVEL_TRACE, p_paquete => NOMBRE_PAQUETE, p_procedimiento => NOMBRE_PROCEDIMIENTO, p_usuario => p_idUsuario, p_descripcion => 'Salio de Pr_RegistrarInfoProyect');
  EXCEPTION
  WHEN OTHERS THEN
    ROLLBACK;
    codExcepcion := PK_UTL_UTILIDAD.Fn_RegistrarExcepcion (PK_UTL_CONSTANTE.COD_USUARIO_DEFECTO, NOMBRE_PAQUETE, NOMBRE_PROCEDIMIENTO, SQLCODE, SQLERRM);
    OPEN p_resultado FOR SELECT '' FROM dual;
    p_codError := PK_UTL_CONSTANTE.ERROR_GENERAL;
    p_msjError := PK_UTL_CONSTANTE.MSJ_EXCEPCION_GENERAL || TO_CHAR(codExcepcion);
  END Pr_RegistrarInfoProyect;
  PROCEDURE Pr_ActualizarInfoProyect(
      p_A013CODIGO               IN GPYT_T013_Avance_Proyecto. A013CODIGO%TYPE,
      p_A013FECHREPRT            IN GPYT_T013_Avance_Proyecto.A013FECHREPRT%TYPE,
      p_A013CAMBSIGNFCTV         IN GPYT_T013_Avance_Proyecto.A013CAMBSIGNFCTV%TYPE,
      p_A013COSTTONLD            IN GPYT_T013_Avance_Proyecto.A013COSTTONLD%TYPE,
      p_A013FINANCCN             IN GPYT_T013_Avance_Proyecto.A013FINANCCN%TYPE,
      p_A013FECHAVNCPROYCT       IN GPYT_T013_Avance_Proyecto.A013FECHAVNCPROYCT%TYPE,
      p_A013OPTAPAGORESULTADOS   IN GPYT_T013_Avance_Proyecto.A013OPTAPAGORESULTADOS%TYPE,
      p_A013IDPROYECTO           IN GPYT_T013_Avance_Proyecto.A013IDPROYECTO%TYPE,
      p_A013EMISREDCXVERIFICAR   IN GPYT_T013_Avance_Proyecto.A013EMISREDCXVERIFICAR%TYPE,
      p_A013EMISREDCVERIFICADAS  IN GPYT_T013_Avance_Proyecto.A013EMISREDCVERIFICADAS%TYPE,
      p_A013EMISREDCDISPNTRANSAR IN GPYT_T013_Avance_Proyecto.A013EMISREDCDISPNTRANSAR%TYPE,
      p_A013EMISREDCTRANSADAS    IN GPYT_T013_Avance_Proyecto.A013EMISREDCTRANSADAS%TYPE,
      p_A013IDARCHV              IN GPYT_T013_Avance_Proyecto.A013IDARCHV%TYPE,
      p_A013NROCPAS              IN GPYT_T013_Avance_Proyecto.A013NROCPAS%TYPE,
      p_A013HAYNUEVOCPA          IN GPYT_T013_Avance_Proyecto.A013HAYNUEVOCPA%TYPE,
      p_idUsuario                IN NUMBER,
      p_resultado OUT CURSOR_SALIDA,
      p_codError OUT NUMBER,
      p_msjError OUT VARCHAR2)
  AS
    NOMBRE_PROCEDIMIENTO VARCHAR2(50) := 'Pr_ActualizarInfoProyect';
    codExcepcion         NUMBER;
  BEGIN
    PK_UTL_UTILIDAD.PR_REGISTRARDEBUG(p_niveldebug => PK_UTL_CONSTANTE.NIVEL_TRACE, p_paquete => NOMBRE_PAQUETE, p_procedimiento => NOMBRE_PROCEDIMIENTO, p_usuario => p_idUsuario, p_descripcion => 'Entro a Pr_ActualizarInfoProyect ');
    --
    PK_T013_AVANCE_PROYECTO.PR_ACTUALIZAR( P_A013CODIGO => P_A013CODIGO, P_A013FECHREPRT => P_A013FECHREPRT, P_A013CAMBSIGNFCTV => P_A013CAMBSIGNFCTV, P_A013COSTTONLD => P_A013COSTTONLD, P_A013FINANCCN => P_A013FINANCCN, P_A013FECHAVNCPROYCT => P_A013FECHAVNCPROYCT, P_A013OPTAPAGORESULTADOS => P_A013OPTAPAGORESULTADOS, P_A013IDPROYECTO => P_A013IDPROYECTO, P_A013EMISREDCXVERIFICAR => P_A013EMISREDCXVERIFICAR, P_A013EMISREDCVERIFICADAS => P_A013EMISREDCVERIFICADAS, P_A013EMISREDCDISPNTRANSAR => P_A013EMISREDCDISPNTRANSAR, P_A013EMISREDCTRANSADAS => P_A013EMISREDCTRANSADAS, P_A013IDARCHV => P_A013IDARCHV, P_A013NROCPAS => P_A013NROCPAS, P_A013HAYNUEVOCPA => P_A013HAYNUEVOCPA, P_IDUSUARIO => P_IDUSUARIO, P_RESULTADO => P_RESULTADO, P_CODERROR => P_CODERROR, P_MSJERROR => P_MSJERROR );
    --
    PK_UTL_UTILIDAD.PR_REGISTRARDEBUG(p_niveldebug => PK_UTL_CONSTANTE.NIVEL_TRACE, p_paquete => NOMBRE_PAQUETE, p_procedimiento => NOMBRE_PROCEDIMIENTO, p_usuario => p_idUsuario, p_descripcion => 'Salio de Pr_ActualizarInfoProyect ');
  EXCEPTION
  WHEN OTHERS THEN
    ROLLBACK;
    codExcepcion := PK_UTL_UTILIDAD.Fn_RegistrarExcepcion (PK_UTL_CONSTANTE.COD_USUARIO_DEFECTO, NOMBRE_PAQUETE, NOMBRE_PROCEDIMIENTO, SQLCODE, SQLERRM);
    OPEN p_resultado FOR SELECT '' FROM dual;
    p_codError := PK_UTL_CONSTANTE.ERROR_GENERAL;
    p_msjError := PK_UTL_CONSTANTE.MSJ_EXCEPCION_GENERAL || TO_CHAR(codExcepcion);
  END Pr_ActualizarInfoProyect;
  PROCEDURE Pr_ConsultarInfoProyect(
      p_A013IDPROYECTO IN GPYT_T013_Avance_Proyecto.A013IDPROYECTO%TYPE,
      p_idUsuario      IN NUMBER,
      p_resultado OUT CURSOR_SALIDA,
      p_codError OUT NUMBER,
      p_msjError OUT VARCHAR2)
  AS
    NOMBRE_PROCEDIMIENTO VARCHAR2(50) := 'Pr_ConsultarInfoProyect';
    codExcepcion         NUMBER;
  BEGIN
    PK_UTL_UTILIDAD.PR_REGISTRARDEBUG(p_niveldebug => PK_UTL_CONSTANTE.NIVEL_TRACE, p_paquete => NOMBRE_PAQUETE, p_procedimiento => NOMBRE_PROCEDIMIENTO, p_usuario => p_idUsuario, p_descripcion => 'Entro a Pr_ConsultarInfoProyect ');
    --
    IF p_A013IDPROYECTO IS NULL THEN
      p_codError        := 4;
      p_msjError        := PK_UTL_UTILIDAD.Fn_Obtenermensaje(p_codError);
      OPEN p_resultado FOR SELECT '' FROM dual;
      RETURN;
    END IF;
    --
    OPEN p_resultado FOR SELECT * FROM GPYT_T013_Avance_Proyecto FUE WHERE FUE.A013IDPROYECTO = p_A013IDPROYECTO AND FUE.A013ESTADOREGISTRO = PK_UTL_CONSTANTE.COD_ACTIVO;
    p_codError                                                                               := PK_UTL_CONSTANTE.COD_OPERACION_CORRECTA;
    p_msjError                                                                               := PK_UTL_UTILIDAD.Fn_ObtenerMensaje (p_codError);
    --
    PK_UTL_UTILIDAD.PR_REGISTRARDEBUG(p_niveldebug => PK_UTL_CONSTANTE.NIVEL_TRACE, p_paquete => NOMBRE_PAQUETE, p_procedimiento => NOMBRE_PROCEDIMIENTO, p_usuario => p_idUsuario, p_descripcion => 'Salio de Pr_ConsultarInfoProyect');
  EXCEPTION
  WHEN OTHERS THEN
    ROLLBACK;
    codExcepcion := PK_UTL_UTILIDAD.Fn_RegistrarExcepcion (PK_UTL_CONSTANTE.COD_USUARIO_DEFECTO, NOMBRE_PAQUETE, NOMBRE_PROCEDIMIENTO, SQLCODE, SQLERRM);
    OPEN p_resultado FOR SELECT '' FROM dual;
    p_codError := PK_UTL_CONSTANTE.ERROR_GENERAL;
    p_msjError := PK_UTL_CONSTANTE.MSJ_EXCEPCION_GENERAL || TO_CHAR(codExcepcion);
  END Pr_ConsultarInfoProyect;
END PK_GPY_INFORMACION_GENERAL;