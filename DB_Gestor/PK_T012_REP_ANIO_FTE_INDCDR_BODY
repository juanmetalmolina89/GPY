--------------------------------------------------------
-- Archivo creado  - jueves-marzo-02-2017   
--------------------------------------------------------
--------------------------------------------------------
--  DDL for Package Body PK_T012_REP_ANIO_FTE_INDCDR
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE BODY "GESTOR"."PK_T012_REP_ANIO_FTE_INDCDR" 
AS
  PROCEDURE Pr_Insertar(
      p_A012FECHAMETA          IN GPYT_T012_Rep_Anio_Fte_Indcdr.A012FECHAMETA%TYPE,
      p_A012VALORMETA          IN GPYT_T012_Rep_Anio_Fte_Indcdr.A012VALORMETA%TYPE,
      p_A012REPRTANFUNTINDICDR IN GPYT_T012_Rep_Anio_Fte_Indcdr.A012REPRTANFUNTINDICDR%TYPE,
      p_A012VALRLOGRD          IN GPYT_T012_Rep_Anio_Fte_Indcdr.A012VALRLOGRD%TYPE,
      p_A012ACCIONESREALIZADAS IN GPYT_T012_Rep_Anio_Fte_Indcdr.A012ACCIONESREALIZADAS%TYPE,
      p_A012RECURSSINVRTDS     IN GPYT_T012_Rep_Anio_Fte_Indcdr.A012RECURSSINVRTDS%TYPE,
      p_A012IDFUENTE           IN GPYT_T012_Rep_Anio_Fte_Indcdr.A012IDFUENTE%TYPE,
      p_A012IDINDCDR           IN GPYT_T012_Rep_Anio_Fte_Indcdr.A012IDINDCDR%TYPE,
      p_A012UNIDDMEDD          IN GPYT_T012_Rep_Anio_Fte_Indcdr.A012UNIDDMEDD%TYPE,
      p_idUsuario              IN NUMBER,
      p_resultado OUT CURSOR_SALIDA,
      p_codError OUT NUMBER,
      p_msjError OUT VARCHAR2)
  AS
    codExcepcion         NUMBER;
    NOMBRE_PROCEDIMIENTO VARCHAR2(50) := 'Pr_Insertar';
    p_A012CODIGO         NUMBER;
  BEGIN
    -- TAREA: Se necesita implantación para PROCEDURE PK_T012_REP_ANIO_FTE_INDCDR.Pr_Insertar
    pk_utl_utilidad.pr_registrardebug ( p_niveldebug => PK_UTL_CONSTANTE.NIVEL_TRACE, p_paquete => NOMBRE_PAQUETE, p_procedimiento => NOMBRE_PROCEDIMIENTO, p_usuario => p_idUsuario, p_descripcion => 'Entro a Pr_Insertar ' || p_A012FECHAMETA);
    -- Validamos obligatoriedad de datos
    IF p_A012FECHAMETA IS NULL OR p_A012VALORMETA IS NULL OR p_A012REPRTANFUNTINDICDR IS NULL OR p_A012VALRLOGRD IS NULL OR p_A012ACCIONESREALIZADAS IS NULL OR p_A012RECURSSINVRTDS IS NULL OR p_A012IDFUENTE IS NULL OR p_A012IDINDCDR IS NULL OR p_A012UNIDDMEDD IS NULL THEN
      p_codError       := 4;
      p_msjError       := PK_UTL_UTILIDAD.Fn_Obtenermensaje(p_codError);
      OPEN p_resultado FOR SELECT '' FROM dual;
      RETURN;
    END IF;
    --
    p_A012CODIGO := PK_UTL_UTILIDAD.Fn_Obtenerid('T012_REP_ANIO_FTE_INDCDR_SEQ');
    --
    INSERT
    INTO GPYT_T012_REP_ANIO_FTE_INDCDR
      (
        A012CODIGO,
        A012FECHAMETA,
        A012VALORMETA,
        A012REPRTANFUNTINDICDR,
        A012VALRLOGRD,
        A012ACCIONESREALIZADAS,
        A012RECURSSINVRTDS,
        A012IDFUENTE,
        A012IDINDCDR,
        A012UNIDDMEDD,
        A012ESTADOREGISTRO,
        A012FECHACREACION,
        A012FECHAMODIFICACION,
        A012USUARIOCREACION,
        A012USUARIOMODIFICACION
      )
      VALUES
      (
        P_A012CODIGO,
        p_A012FECHAMETA,
        p_A012VALORMETA,
        p_A012REPRTANFUNTINDICDR,
        p_A012VALRLOGRD,
        p_A012ACCIONESREALIZADAS,
        p_A012RECURSSINVRTDS,
        p_A012IDFUENTE,
        p_A012IDINDCDR,
        p_A012UNIDDMEDD,
        PK_UTL_CONSTANTE.COD_ACTIVO,
        sysdate,
        sysdate,
        p_idUsuario,
        ''
      );
    --
    OPEN p_resultado FOR SELECT P_A012CODIGO A012CODIGO FROM dual;
    p_codError := PK_UTL_CONSTANTE.COD_OPERACION_CORRECTA;
    p_msjError := PK_UTL_UTILIDAD.fn_ObtenerMensaje(p_codError);
    --
    pk_utl_utilidad.pr_registrardebug(p_niveldebug => PK_UTL_CONSTANTE.NIVEL_TRACE, p_paquete => NOMBRE_PAQUETE, p_procedimiento => NOMBRE_PROCEDIMIENTO, p_usuario => p_idUsuario, p_descripcion => 'Salio de Pr_Insertar ' || p_A012FECHAMETA);
  END Pr_Insertar;
--
  PROCEDURE Pr_Eliminar
    (
      p_A012CODIGO IN GPYT_T012_Rep_Anio_Fte_Indcdr.A012CODIGO%TYPE,
      p_idUsuario  IN NUMBER,
      p_resultado OUT CURSOR_SALIDA,
      p_codError OUT NUMBER,
      p_msjError OUT VARCHAR2
    )
  AS
    codExcepcion         NUMBER;
    NOMBRE_PROCEDIMIENTO VARCHAR2(50) := 'Pr_Eliminar';
    estadoReg            VARCHAR2(1);
    numReg               NUMBER;
  BEGIN
    pk_utl_utilidad.pr_registrardebug (p_niveldebug => PK_UTL_CONSTANTE.NIVEL_TRACE, p_paquete => NOMBRE_PAQUETE, p_procedimiento => NOMBRE_PROCEDIMIENTO, p_usuario => p_idUsuario, p_descripcion => 'Entro a Pr_Eliminar ' || p_A012CODIGO);
    ----
    IF p_A012CODIGO IS NULL THEN
      p_codError    := 4;
      p_msjError    := PK_UTL_UTILIDAD.Fn_Obtenermensaje(p_codError);
      OPEN p_resultado FOR SELECT '' FROM dual;
      RETURN;
    END IF;
    ----
    SELECT COUNT(*)
    INTO numReg
    FROM GPYT_T012_REP_ANIO_FTE_INDCDR
    WHERE A012CODIGO       = p_A012CODIGO
    AND A012ESTADOREGISTRO = PK_UTL_CONSTANTE.COD_ACTIVO;
    ----
    IF numReg > 0 THEN
      UPDATE GPYT_T012_REP_ANIO_FTE_INDCDR
      SET A012ESTADOREGISTRO    = PK_UTL_CONSTANTE.COD_INACTIVO,
        A012FECHAMODIFICACION   = sysdate,
        A012USUARIOMODIFICACION = p_idUsuario
      WHERE A012CODIGO          = p_A012CODIGO;
      OPEN p_resultado FOR SELECT '' FROM dual;
      p_codError := PK_UTL_CONSTANTE.COD_OPERACION_CORRECTA;
      p_msjError := PK_UTL_UTILIDAD.fn_ObtenerMensaje(p_codError);
      RETURN;
    ELSE
      p_codError := 5;
      p_msjError := PK_UTL_UTILIDAD.fn_ObtenerMensaje(p_codError);
      OPEN p_resultado FOR SELECT '' FROM dual;
      RETURN;
    END IF;
    ----
    pk_utl_utilidad.pr_registrardebug(p_niveldebug => PK_UTL_CONSTANTE.NIVEL_TRACE, p_paquete => NOMBRE_PAQUETE, p_procedimiento => NOMBRE_PROCEDIMIENTO, p_usuario => p_idUsuario, p_descripcion => 'Salio de Pr_Eliminar ' || p_A012CODIGO);
  END Pr_Eliminar;
  PROCEDURE Pr_Actualizar(
      p_A012CODIGO             IN GPYT_T012_Rep_Anio_Fte_Indcdr.A012CODIGO%TYPE,
      p_A012FECHAMETA          IN GPYT_T012_Rep_Anio_Fte_Indcdr.A012FECHAMETA%TYPE,
      p_A012VALORMETA          IN GPYT_T012_Rep_Anio_Fte_Indcdr.A012VALORMETA%TYPE,
      p_A012REPRTANFUNTINDICDR IN GPYT_T012_Rep_Anio_Fte_Indcdr.A012REPRTANFUNTINDICDR%TYPE,
      p_A012VALRLOGRD          IN GPYT_T012_Rep_Anio_Fte_Indcdr.A012VALRLOGRD%TYPE,
      p_A012ACCIONESREALIZADAS IN GPYT_T012_Rep_Anio_Fte_Indcdr.A012ACCIONESREALIZADAS%TYPE,
      p_A012RECURSSINVRTDS     IN GPYT_T012_Rep_Anio_Fte_Indcdr.A012RECURSSINVRTDS%TYPE,
      p_A012IDFUENTE           IN GPYT_T012_Rep_Anio_Fte_Indcdr.A012IDFUENTE%TYPE,
      p_A012IDINDCDR           IN GPYT_T012_Rep_Anio_Fte_Indcdr.A012IDINDCDR%TYPE,
      p_A012UNIDDMEDD          IN GPYT_T012_Rep_Anio_Fte_Indcdr.A012UNIDDMEDD%TYPE,
      p_idUsuario              IN NUMBER,
      p_resultado OUT CURSOR_SALIDA,
      p_codError OUT NUMBER,
      p_msjError OUT VARCHAR2)
  AS
    codExcepcion         NUMBER;
    NOMBRE_PROCEDIMIENTO VARCHAR2(50) := 'Pr_Actualizar';
    estadoReg            VARCHAR2(1);
    numReg               NUMBER;
  BEGIN
    pk_utl_utilidad.pr_registrardebug (p_niveldebug => PK_UTL_CONSTANTE.NIVEL_TRACE, p_paquete => NOMBRE_PAQUETE, p_procedimiento => NOMBRE_PROCEDIMIENTO, p_usuario => p_idUsuario, p_descripcion => 'Entro a Pr_Actualizar ' || p_A012CODIGO);
    --
    IF p_A012CODIGO IS NULL THEN
      p_codError    := 4;
      p_msjError    := PK_UTL_UTILIDAD.Fn_Obtenermensaje(p_codError);
      OPEN p_resultado FOR SELECT '' FROM dual;
      RETURN;
    END IF;
    --
    SELECT COUNT(*)
    INTO numReg
    FROM GPYT_T012_REP_ANIO_FTE_INDCDR
    WHERE A012CODIGO       = p_A012CODIGO
    AND A012ESTADOREGISTRO = PK_UTL_CONSTANTE.COD_ACTIVO;
    --
    IF numReg > 0 THEN
      --
      UPDATE GPYT_T012_REP_ANIO_FTE_INDCDR
      SET A012FECHAMETA         = NVL(p_A012FECHAMETA,A012FECHAMETA),
        A012VALORMETA           = NVL(p_A012VALORMETA,A012VALORMETA),
        A012REPRTANFUNTINDICDR  = NVL(p_A012REPRTANFUNTINDICDR,A012REPRTANFUNTINDICDR),
        A012VALRLOGRD           = NVL(p_A012VALRLOGRD,A012VALRLOGRD),
        A012ACCIONESREALIZADAS  = NVL(p_A012ACCIONESREALIZADAS,A012ACCIONESREALIZADAS),
        A012RECURSSINVRTDS      = NVL(p_A012RECURSSINVRTDS,A012RECURSSINVRTDS),
        A012IDFUENTE            = NVL(p_A012IDFUENTE,A012IDFUENTE),
        A012IDINDCDR            = NVL(p_A012IDINDCDR,A012IDINDCDR),
        A012UNIDDMEDD           = NVL(p_A012UNIDDMEDD,A012UNIDDMEDD),
        A012FECHAMODIFICACION   = sysdate,
        A012USUARIOMODIFICACION = p_idUsuario
      WHERE A012CODIGO          = p_A012CODIGO;
      --
      OPEN p_resultado FOR SELECT p_A012CODIGO A012CODIGO FROM dual;
      p_codError := PK_UTL_CONSTANTE.COD_OPERACION_CORRECTA;
      p_msjError := PK_UTL_UTILIDAD.fn_ObtenerMensaje(p_codError);
      RETURN;
    ELSE
      p_codError := 5;
      p_msjError := PK_UTL_UTILIDAD.fn_ObtenerMensaje(p_codError);
      OPEN p_resultado FOR SELECT '' FROM dual;
      RETURN;
    END IF;
    --
    pk_utl_utilidad.pr_registrardebug(p_niveldebug => PK_UTL_CONSTANTE.NIVEL_TRACE, p_paquete => NOMBRE_PAQUETE, p_procedimiento => NOMBRE_PROCEDIMIENTO, p_usuario => p_idUsuario, p_descripcion => 'Salio de Pr_Actualizar ' || p_A012CODIGO);
  END Pr_Actualizar;
--
  PROCEDURE Pr_ConsultarPorFiltro(
      p_Filtro    IN VARCHAR2,
      p_idUsuario IN NUMBER,
      p_resultado OUT CURSOR_SALIDA,
      p_codError OUT NUMBER,
      p_msjError OUT VARCHAR2)
  AS
    codExcepcion         NUMBER;
    NOMBRE_PROCEDIMIENTO VARCHAR2(50) := 'Pr_ConsultarPorFiltro';
    estadoReg            VARCHAR2(1);
    strSQL               VARCHAR2(255);
    strSQL2              VARCHAR2(500);
  BEGIN
    pk_utl_utilidad.pr_registrardebug (p_niveldebug => PK_UTL_CONSTANTE.NIVEL_TRACE, p_paquete => NOMBRE_PAQUETE, p_procedimiento => NOMBRE_PROCEDIMIENTO, p_usuario => p_idUsuario, p_descripcion => 'Entro a Pr_ConsultarPorFiltro ' || p_Filtro);
    --
    IF p_Filtro                                                                                IS NULL THEN
      OPEN p_resultado FOR SELECT * FROM GPYT_T012_REP_ANIO_FTE_INDCDR WHERE A012ESTADOREGISTRO = PK_UTL_CONSTANTE.COD_ACTIVO ;
      p_codError                                                                               := PK_UTL_CONSTANTE.COD_OPERACION_CORRECTA;
      p_msjError                                                                               := PK_UTL_UTILIDAD.fn_ObtenerMensaje(p_codError);
      RETURN;
    END IF;
    strSQL2 := 'SELECT * FROM GPYT_T012_REP_ANIO_FTE_INDCDR WHERE ' || p_Filtro || ' AND A012ESTADOREGISTRO = PK_UTL_CONSTANTE.COD_ACTIVO';
    OPEN p_resultado FOR strSQL2;
    p_codError := PK_UTL_CONSTANTE.COD_OPERACION_CORRECTA;
    p_msjError := PK_UTL_UTILIDAD.fn_ObtenerMensaje(p_codError);
    ---
    pk_utl_utilidad.pr_registrardebug(p_niveldebug => PK_UTL_CONSTANTE.NIVEL_TRACE, p_paquete => NOMBRE_PAQUETE, p_procedimiento => NOMBRE_PROCEDIMIENTO, p_usuario => p_idUsuario, p_descripcion => 'Salio de Pr_ConsultarPorFiltro ' || p_Filtro);
  END Pr_ConsultarPorFiltro;
END PK_T012_REP_ANIO_FTE_INDCDR;

/
